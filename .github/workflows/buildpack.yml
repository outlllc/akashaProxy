name: Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

env:
  TIMEZONE: Asia/Shanghai
  NDK_VERSION: r26b
  NODE_VERSION: '20'
  TAGS: with_gvisor

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: arm64
            goarch: arm64
            goos: android
            go_version: "1.20"
            cc_prefix: aarch64-linux-android33-clang
            binary_name: clashMeta-android-arm64-v8a
          - arch: arm32
            goarch: arm
            goos: android
            go_version: "1.21"
            cc_prefix: armv7a-linux-androideabi33-clang
            binary_name: clashMeta-android-armeabi-v7a
          - arch: x86_64
            goarch: amd64
            goos: linux
            go_version: "1.21"
            cc_prefix: x86_64-linux-android33-clang
            binary_name: clashMeta-android-x86_64

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: 设置环境变量
      run: |
        sudo timedatectl set-timezone "$TIMEZONE"
        VERSION=$(cd Clash.Meta && git rev-parse --short HEAD)
        echo "buildSha=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        echo "LDFLAGS=-X 'github.com/metacubex/mihomo/constant.Version=${VERSION}' -X 'github.com/metacubex/mihomo/constant.BuildTime=$(date -u)' -w -s -buildid=" >> $GITHUB_ENV
        mkdir -p module/bin
        echo "commit=$(echo "${{ github.event.head_commit.message }}" | sed 's/\([][\\`.*^$\/+?{}()=!|:-]\)/\\\1/g')" >> $GITHUB_ENV

    - uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go_version }}
        check-latest: true

    - uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: ${{ env.NDK_VERSION }}
        add-to-path: true

    - uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - run: make build-webui

    - name: 构建 ${{ matrix.arch }}
      run: |
        cd Clash.Meta && go mod tidy
        CC=${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.cc_prefix }} \
        CGO_ENABLED=0 GOARCH=${{ matrix.goarch }} GOOS=${{ matrix.goos }} \
        go build -tags $TAGS -trimpath -ldflags "$LDFLAGS" -o ../module/bin/${{ matrix.binary_name }}
        cd ../module/bin && tar -vcjf ${{ matrix.binary_name }}.tar.bz2 ${{ matrix.binary_name }} && rm -rf ${{ matrix.binary_name }}

    - name: 打包并上传
      run: |
        make pack
        mv ClashforRoot.zip ClashforRoot-${{ matrix.arch }}-${{ env.buildSha }}.zip
        mkdir -p out/ClashforRoot-${{ matrix.arch }}-${{ env.buildSha }}
        cp -Rf module/* out/ClashforRoot-${{ matrix.arch }}-${{ env.buildSha }}/
        echo "ZIP_FILE=$(find . -name 'ClashforRoot-${{ matrix.arch }}-${{ env.buildSha }}.zip')" >> $GITHUB_ENV

    - uses: actions/upload-artifact@main
      with:
        name: ClashforRoot-${{ matrix.arch }}-${{ env.buildSha }}
        path: out/ClashforRoot-${{ matrix.arch }}-${{ env.buildSha }}

    - name: Telegram通知
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/master'
      env:
        CHANNEL_ID: ${{ secrets.TELEGRAM_TO }}
        BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        FILE: ${{ env.ZIP_FILE }}
        COMMIT_MESSAGE: |+
          **新构建完成！**
          架构: ${{ matrix.arch }}
          `${{ env.commit }}`
          by ${{ github.event.head_commit.author.name }}
          [查看构建](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          [查看提交](${{ github.event.head_commit.url }})
      run: |
        ESCAPED=$(python3 -c 'import json,os,urllib.parse; print(urllib.parse.quote(json.dumps(os.environ["COMMIT_MESSAGE"])))')
        curl -v "https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&media=%5B%7B%22type%22:%22document%22,%20%22media%22:%22attach://release%22,%22parse_mode%22:%22MarkdownV2%22,%22caption%22:${ESCAPED}%7D%5D" -F release="@${FILE}"
