#!/system/bin/sh
# Last updated: 2025-04-12 01:57:00 UTC
# Author: outlllc
# Module: Magisk Mihomo iptables rules

scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})
. /data/adb/clash/setting.ini

# 检查root权限
if [ "$(id -u)" -ne 0 ]; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] This script must be run as root"
    exit 1
fi

# 优化的日志函数
log() {
    local level=$1
    shift
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $*" >&2
}

# get_yaml_value() {
#        local key=$1
#        local default=$2
#        busybox awk -v key="$key" '
#            !/^ *#/ && $1 == key":" {
#                print $2
#                found=1
#                exit
#            }
#            END {
#                if(!found) print "'"$default"'"
#            }
#        ' "${Clash_config_file}" 2>/dev/null
#    }
#
#    # 获取配置
#    local clash_mode=$(get_yaml_value "mode" "rules")
#    local clash_enhanced_mode=$(get_yaml_value "enhanced-mode" "fake-ip") 
#    local fake_ip_range=$(get_yaml_value "fake-ip-range" "198.18.0.1/16")
#}

if [ -z "${busybox_path}" ]; then
    for path in "/data/adb/magisk/busybox" "/system/bin/busybox" "/system/xbin/busybox"; do
        if [ -f "$path" ]; then
            busybox_path="$path"
            break
        fi
    done
    if [ -z "${busybox_path}" ]; then
        busybox_path=$(which busybox 2>/dev/null)
    fi
    if [ -z "${busybox_path}" ]; then
        busybox_path="/data/adb/magisk/busybox"
    fi
fi

if [ ! -x "${busybox_path}" ]; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] busybox not found or not executable at ${busybox_path}"
    exit 1
fi

config_info() {
    local config_file="${Clash_config_file}"
    if [ ! -f "$config_file" ]; then
        log "ERROR" "Config file not found: $config_file"
        return 1
    fi
    clash_mode=$(${busybox_path} awk '!/^ *#/ && /mode: / { print $2;found=1; exit } END{ if(!found) print "rules" }' "$config_file")
    clash_enhanced_mode=$(${busybox_path} awk '!/^ *#/ && /enhanced-mode: / { print $2;found=1; exit } END{ if(!found) print "fake-ip" }' "$config_file")
    fake_ip_range=$(${busybox_path} awk '!/^ *#/ && /fake-ip-range:/ { print $2; found=1; exit } END { if (!found) print "198.18.0.1/16" }' "$config_file")
    
    clash_dns_port=$(${busybox_path} sed -n '/^dns:/,/^[^ ]/p' "$config_file" | ${busybox_path} grep -E '^[^#]*listen:.*:[0-9]+' | ${busybox_path} grep -Eo '[0-9]+' | ${busybox_path} tail -n 1)
    clash_dns_port=${clash_dns_port:-1053}

    log "INFO" "enhanced-mode: $clash_enhanced_mode, fake-ip-range: $fake_ip_range, listen-port: $clash_dns_port, mode: $clash_mode"
    if [[ "${network_mode}" == @(mixed|tun) ]]; then
        log "INFO" "tun device: ($tun_device)"
    fi
}

# 检查是否存在 iptables 规则链
check_chain_exists() {
    local table=$1
    local chain=$2
    local ip_cmd=$3
    $ip_cmd -t $table -L $chain >/dev/null 2>&1
}

# 网络规则管理函数
manage_rules() {
    local action=$1
    case "$action" in
        "create")
            ip -4 rule add fwmark ${mark_id} table ${table_id} pref ${pref_id}
            ip -4 route add local default dev lo table ${table_id}
            if [ "${ipv6}" = "true" ]; then
                ip -6 rule add fwmark ${mark_id} table ${table_id} pref ${pref_id}
                ip -6 route add local default dev lo table ${table_id}
            fi
            ;;
        "flush")
            ip rule del fwmark ${mark_id} table ${table_id} 2>/dev/null || true
            ip route flush table ${table_id} 2>/dev/null || true
            if [ "${ipv6}" = "true" ]; then
                ip -6 rule del fwmark ${mark_id} table ${table_id} 2>/dev/null || true
                ip -6 route flush table ${table_id} 2>/dev/null || true
            fi
            ;;
    esac
}

# iptables链创建函数
create_chain() {
    local table=$1 
    local chain=$2 
    local ipv=$3
    local cmd="${ipv}tables_wait"

    if ! check_chain_exists "$table" "$chain" "$cmd"; then
        $cmd -t $table -N $chain 2>/dev/null
    else
        $cmd -t $table -F $chain
    fi
}

# 设置 mangle 表规则链
setup_mangle_chains() {
    # 创建所有必要的链
    create_chain mangle CLASH_OUT ip
    create_chain mangle CLASH_PRE ip
    create_chain mangle FILTER_PRE_CLASH ip
    create_chain mangle FILTER_OUT_CLASH ip

    # IPv6 链创建
    if [ "${ipv6}" = "true" ]; then
        create_chain mangle CLASH_OUT ip6
        create_chain mangle CLASH_PRE ip6
        create_chain mangle FILTER_PRE_CLASH ip6
        create_chain mangle FILTER_OUT_CLASH ip6
    fi

    # 设置 CLASH_PRE 规则
    for subnet in ${reserved_ip[*]}; do
        ${iptables_wait} -t mangle -A CLASH_PRE -d ${subnet} -j ACCEPT
    done

    ${iptables_wait} -t mangle -A CLASH_PRE -p tcp -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id} || log "WARN" "系统可能不支持Tproxy-TCP"
    ${iptables_wait} -t mangle -A CLASH_PRE -p udp ! --dport 53 -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id} || log "WARN" "系统可能不支持Tproxy-UDP"

    # IPv6支持
    if [ "${ipv6}" = "true" ]; then
        for subnet in ${reserved_ip6[*]}; do
            ${ip6tables_wait} -t mangle -A CLASH_PRE -d ${subnet} -j ACCEPT
        done
        ${ip6tables_wait} -t mangle -A CLASH_PRE -p tcp -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id} || log "WARN" "系统可能不支持Tproxy-TCP6"
        ${ip6tables_wait} -t mangle -A CLASH_PRE -p udp ! --dport 53 -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id} || log "WARN" "系统可能不支持Tproxy-UDP6"
    fi
}

# 设置 nat 表规则链
setup_nat_chains() {
    # 创建所有必要的 nat 链
    create_chain nat DNS_PRE ip
    create_chain nat DNS_OUT ip
    create_chain nat FILTER_PRE_DNS ip
    create_chain nat FILTER_OUT_DNS ip
    
    # IPv6 nat 链创建
    if [ "${ipv6}" = "true" ]; then
        create_chain nat DNS_PRE ip6
        create_chain nat DNS_OUT ip6
        create_chain nat FILTER_PRE_DNS ip6
        create_chain nat FILTER_OUT_DNS ip6
    fi

    # DNS处理规则设置
    ${iptables_wait} -t nat -A DNS_PRE -p udp -j REDIRECT --to-ports ${Clash_dns_port}
    ${iptables_wait} -t nat -A DNS_OUT -p udp -j REDIRECT --to-ports ${Clash_dns_port}
    
    if [ "${ipv6}" = "true" ]; then
        ${ip6tables_wait} -t nat -A DNS_PRE -p udp -j REDIRECT --to-ports ${Clash_dns_port}
        ${ip6tables_wait} -t nat -A DNS_OUT -p udp -j REDIRECT --to-ports ${Clash_dns_port}
    fi
}

# 清理规则函数 - 修改后的版本
flush_rules() {
    local mode=$1
    log "INFO" "Starting cleanup for mode: ${mode}"
    
    if [ -z "$mode" ]; then
        log "ERROR" "No mode specified for flush_rules"
        return 1
    fi
    
    # 清理链的函数
    clean_chain() {
        if [ $# -ne 3 ]; then
            log "ERROR" "clean_chain requires 3 parameters"
            return 1
        fi
        
        local table="$1"
        local chain="$2"
        local ip_cmd="$3"
        
        if $ip_cmd -t $table -L $chain >/dev/null 2>&1; then
            $ip_cmd -t $table -D OUTPUT -j $chain 2>/dev/null || true
            $ip_cmd -t $table -D PREROUTING -j $chain 2>/dev/null || true
            $ip_cmd -t $table -F $chain 2>/dev/null || true
            $ip_cmd -t $table -X $chain 2>/dev/null || true
            log "INFO" "Cleaned chain $chain in table $table"
        fi
    }

    # 根据模式清理不同的规则
    if [ "$mode" = "tproxy" ]; then
        # 清理 TPROXY 模式特有的链
        clean_chain mangle "CLASH_PRE" "${iptables_wait}"
        clean_chain mangle "CLASH_OUT" "${iptables_wait}"
        clean_chain mangle "FILTER_PRE_CLASH" "${iptables_wait}"
        clean_chain mangle "FILTER_OUT_CLASH" "${iptables_wait}"
        clean_chain nat "FILTER_PRE_DNS" "${iptables_wait}"
        clean_chain nat "FILTER_OUT_DNS" "${iptables_wait}"
        clean_chain nat "DNS_PRE" "${iptables_wait}"
        clean_chain nat "DNS_OUT" "${iptables_wait}"

    if [ "${ipv6}" = "true" ]; then
            clean_chain mangle "CLASH_PRE" "${ip6tables_wait}"
            clean_chain mangle "CLASH_OUT" "${ip6tables_wait}"
            clean_chain mangle "FILTER_PRE_CLASH" "${ip6tables_wait}"
            clean_chain mangle "FILTER_OUT_CLASH" "${ip6tables_wait}"
            clean_chain nat "FILTER_PRE_DNS" "${ip6tables_wait}"
            clean_chain nat "FILTER_OUT_DNS" "${ip6tables_wait}"
            clean_chain nat "DNS_PRE" "${ip6tables_wait}"
            clean_chain nat "DNS_OUT" "${ip6tables_wait}"
    fi

        # 清理路由表
        manage_rules flush
        
    elif [ "$mode" = "tun" ]; then
        # 检查 TUN 设备名称
        if [ -z "${tun_device}" ]; then
            log "ERROR" "TUN device name is not set"
            return 1
        fi
        
        # 清理 TUN 模式特有的链
        clean_chain mangle "CLASH_OUT" "${iptables_wait}"
        clean_chain mangle "CLASH_PRE" "${iptables_wait}"

        # 检查并清理 FORWARD 规则
        if ${iptables_wait} -C FORWARD -o ${tun_device} -j ACCEPT 2>/dev/null; then
            ${iptables_wait} -D FORWARD -o ${tun_device} -j ACCEPT
        fi

        if ${iptables_wait} -C FORWARD -i ${tun_device} -j ACCEPT 2>/dev/null; then
            ${iptables_wait} -D FORWARD -i ${tun_device} -j ACCEPT
        fi

        # 清理 TUN 路由规则
        ip rule del fwmark ${mark_id} lookup ${table_id} 2>/dev/null || true
        ip route del default dev ${tun_device} table ${table_id} 2>/dev/null || true

        if [ "${ipv6}" = "true" ]; then
            clean_chain mangle "CLASH_OUT" "${ip6tables_wait}"
            clean_chain mangle "CLASH_PRE" "${ip6tables_wait}"

            if ${ip6tables_wait} -C FORWARD -o ${tun_device} -j ACCEPT 2>/dev/null; then
                ${ip6tables_wait} -D FORWARD -o ${tun_device} -j ACCEPT
            fi

            if ${ip6tables_wait} -C FORWARD -i ${tun_device} -j ACCEPT 2>/dev/null; then
                ${ip6tables_wait} -D FORWARD -i ${tun_device} -j ACCEPT
            fi
            
            ip -6 rule del fwmark ${mark_id} lookup ${table_id} 2>/dev/null || true
            ip -6 route del default dev ${tun_device} table ${table_id} 2>/dev/null || true
        fi
    fi
    
    log "INFO" "Cleanup completed for mode: ${mode}"
}

# 应用规则函数
apply_rules() {
    # 1. 设置各个表的规则链
    setup_mangle_chains
    setup_nat_chains

    # 2. 配置过滤规则
    ${iptables_wait} -t mangle -A FILTER_PRE_CLASH -j CLASH_PRE
    ${scripts_dir}/clash.tool -f
    
    if [ "${Clash_enhanced_mode}" = "fake-ip" ]; then
        mode="blacklist"
    fi
    
    local apps=$(cat ${appuid_file} | sort -u)
    if [ "${mode}" = "global" ]; then
        mode="blacklist"
        apps=""
    fi

    # 3. 应用过滤规则
    if [ "${mode}" = "blacklist" ]; then
        for appuid in ${apps}; do
            ${iptables_wait} -t mangle -A FILTER_OUT_CLASH -m owner --uid-owner ${appuid} -j ACCEPT
        done
        ${iptables_wait} -t mangle -A FILTER_OUT_CLASH -m owner ! --gid-owner ${Clash_group} -j CLASH_OUT
    elif [ "${mode}" = "whitelist" ]; then
        for appuid in ${apps}; do
            ${iptables_wait} -t mangle -A FILTER_OUT_CLASH -m owner --uid-owner ${appuid} -j CLASH_OUT
        done
    fi

    # 4. IPv6 支持
    if [ "${ipv6}" = "true" ]; then
        # IPv6 mangle 规则
        for subnet in ${reserved_ip6[*]}; do
            ${ip6tables_wait} -t mangle -A CLASH_PRE -d ${subnet} -j ACCEPT
        done
        ${ip6tables_wait} -t mangle -A CLASH_PRE -p tcp -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id} || log "WARN" "系统可能不支持Tproxy-TCP6"
        ${ip6tables_wait} -t mangle -A CLASH_PRE -p udp ! --dport 53 -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id} || log "WARN" "系统可能不支持Tproxy-UDP6"

        # IPv6 NAT 规则
        ${ip6tables_wait} -t nat -A DNS_PRE -p udp -j REDIRECT --to-ports ${Clash_dns_port}
        ${ip6tables_wait} -t nat -A DNS_OUT -p udp -j REDIRECT --to-ports ${Clash_dns_port}

        # IPv6 应用过滤规则
        ${ip6tables_wait} -t mangle -A FILTER_PRE_CLASH -j CLASH_PRE
        if [ "${mode}" = "blacklist" ]; then
            for appuid in ${apps}; do
                ${ip6tables_wait} -t mangle -A FILTER_OUT_CLASH -m owner --uid-owner ${appuid} -j ACCEPT
            done
            ${ip6tables_wait} -t mangle -A FILTER_OUT_CLASH -m owner ! --gid-owner ${Clash_group} -j CLASH_OUT
        elif [ "${mode}" = "whitelist" ]; then
            for appuid in ${apps}; do
                ${ip6tables_wait} -t mangle -A FILTER_OUT_CLASH -m owner --uid-owner ${appuid} -j CLASH_OUT
            done
        fi
    fi

    # 5. 应用主规则
    ${iptables_wait} -t mangle -A PREROUTING -j FILTER_PRE_CLASH
    ${iptables_wait} -t mangle -A OUTPUT -j FILTER_OUT_CLASH
    ${iptables_wait} -t nat -A PREROUTING -j FILTER_PRE_DNS
    ${iptables_wait} -t nat -A OUTPUT -j FILTER_OUT_DNS

    if [ "${ipv6}" = "true" ]; then
        ${ip6tables_wait} -t mangle -A PREROUTING -j FILTER_PRE_CLASH
        ${ip6tables_wait} -t mangle -A OUTPUT -j FILTER_OUT_CLASH
        ${ip6tables_wait} -t nat -A PREROUTING -j FILTER_PRE_DNS
        ${ip6tables_wait} -t nat -A OUTPUT -j FILTER_OUT_DNS
    fi

    ${scripts_dir}/clash.tool -m
}

# TUN模式相关函数
set_tun() {
    log "INFO" "配置 TUN 设备和规则..."
    # 配置 IPv4 路由
    ip -4 rule add fwmark ${mark_id} table ${table_id} pref ${pref_id}
    while [ "$(ip -4 route show table ${table_id} 2>/dev/null)" == "" ]; do
        ip -4 route add default dev ${tun_device} table ${table_id}
    done

    # 配置转发规则
    ${iptables_wait} -I FORWARD -o ${tun_device} -j ACCEPT
    ${iptables_wait} -I FORWARD -i ${tun_device} -j ACCEPT

    if [ "${ipv6}" = "true" ]; then
        log "INFO" "配置 IPv6 TUN 规则..."
        ip -6 rule add fwmark ${mark_id} table ${table_id} pref ${pref_id}
        while [ "$(ip -6 route show table ${table_id} 2>/dev/null)" == "" ]; do
            ip -6 route add default dev ${tun_device} table ${table_id}
        done

        ${ip6tables_wait} -I FORWARD -o ${tun_device} -j ACCEPT
        ${ip6tables_wait} -I FORWARD -i ${tun_device} -j ACCEPT
    fi

    setup_tun_rules
}

# 设置 TUN 规则
setup_tun_rules() {
    create_chain mangle CLASH_PRE ip
    for subnet in ${reserved_ip[*]}; do
        ${iptables_wait} -t mangle -A CLASH_PRE -d ${subnet} -j RETURN
    done

    ${iptables_wait} -t mangle -A CLASH_PRE -j MARK --set-xmark ${mark_id}
    ${iptables_wait} -t mangle -A PREROUTING -j CLASH_PRE

    create_chain mangle CLASH_OUT ip
    ${iptables_wait} -t mangle -A CLASH_OUT -m owner --uid-owner ${Clash_user} --gid-owner ${Clash_group} -j RETURN

    if [ "${ipv6}" = "true" ]; then
        create_chain mangle CLASH_PRE ip6
        for subnet in ${reserved_ip6[*]}; do
            ${ip6tables_wait} -t mangle -A CLASH_PRE -d ${subnet} -j RETURN
        done

        ${ip6tables_wait} -t mangle -A CLASH_PRE -j MARK --set-xmark ${mark_id}
        ${ip6tables_wait} -t mangle -A PREROUTING -j CLASH_PRE

        create_chain mangle CLASH_OUT ip6
        ${ip6tables_wait} -t mangle -A CLASH_OUT -m owner --uid-owner ${Clash_user} --gid-owner ${Clash_group} -j RETURN
    fi

    setup_tun_mode_apps
}

# 设置 TUN 模式应用规则
setup_tun_mode_apps() {
    ${scripts_dir}/clash.tool -f
    local apps=$(${busybox_path} cat ${appuid_file} | ${busybox_path} sort -u)
    if [ "${mode}" = "global" ]; then
        mode="blacklist"
        apps=""
    fi

    if [ "${mode}" = "blacklist" ]; then
        for appuid in ${apps}; do
            ${iptables_wait} -t mangle -A CLASH_OUT -m owner --uid-owner ${appuid} -j RETURN
        done
        ${iptables_wait} -t mangle -A CLASH_OUT -j MARK --set-xmark ${mark_id}
        
        if [ "${ipv6}" = "true" ]; then
            for appuid in ${apps}; do
                ${ip6tables_wait} -t mangle -A CLASH_OUT -m owner --uid-owner ${appuid} -j RETURN
            done
            ${ip6tables_wait} -t mangle -A CLASH_OUT -j MARK --set-xmark ${mark_id}
        fi
    elif [ "${mode}" = "whitelist" ]; then
        for appuid in ${apps}; do
            ${iptables_wait} -t mangle -A CLASH_OUT -m owner --uid-owner ${appuid} -j MARK --set-xmark ${mark_id}
        done
        
        if [ "${ipv6}" = "true" ]; then
            for appuid in ${apps}; do
                ${ip6tables_wait} -t mangle -A CLASH_OUT -m owner --uid-owner ${appuid} -j MARK --set-xmark ${mark_id}
            done
        fi
    fi

    ${iptables_wait} -t mangle -A OUTPUT -j CLASH_OUT
    if [ "${ipv6}" = "true" ]; then
        ${ip6tables_wait} -t mangle -A OUTPUT -j CLASH_OUT
    fi
}

# 混合模式处理
handle_mixed_mode() {
    log "INFO" "配置混合模式..."
    if [ "${Clash_auto_route}" = "true" ]; then
        ${iptables_wait} -I FORWARD -o ${tun_device} -j ACCEPT
        ${iptables_wait} -I FORWARD -i ${tun_device} -j ACCEPT
        if [ "${ipv6}" = "true" ]; then
            ${ip6tables_wait} -I FORWARD -o ${tun_device} -j ACCEPT
            ${ip6tables_wait} -I FORWARD -i ${tun_device} -j ACCEPT
        fi
        log "INFO" "auto_route已开启"
        return 0
    fi
    
    if manage_rules create; then
        apply_rules
        set_tun
    fi
}

# 处理禁用操作
handle_disable() {
    if [ "${mode}" = "socks" ]; then
        exit 0
    fi
    
    if [[ "${mode}" == @(blacklist|whitelist|global) ]]; then
        if [ "${network_mode}" = "tun" ]; then
            log "INFO" "正在清理 TUN 模式规则..."
            flush_rules "tun"
        elif [ "${network_mode}" = "tproxy" ]; then
            log "INFO" "正在清理 TPROXY 模式规则..."
            flush_rules "tproxy"
        elif [ "${network_mode}" = "mixed" ]; then
            log "INFO" "正在清理mixed模式规则..."
            flush_rules "tun"
        fi
        log "INFO" "iptables规则已清空"
    fi
}

# 显示用法信息
show_usage() {
    echo "${red}$0 $1 not found${normal}"
    echo "${yellow}Usage:${normal} ${green}$0${normal} {${yellow}enable|disable|renew${normal}}"
}

# 主执行逻辑
main() {
    if [[ "${network_mode}" == @(mixed|tproxy|tun|redirect|enhance) ]]; then
        case "$1" in
            enable|renew)
                config_info || exit 1
                
                case "${network_mode}" in
                    tproxy)
                        log "INFO" "Using Tproxy: tcp + udp"
                        log "INFO" "Creating iptables transparent proxy rules"
                        manage_rules create && apply_rules
                        ;;
                    tun)
                        log "INFO" "Using tun: tcp + udp"
                        set_tun
                        ;;
                    mixed)
                        log "INFO" "Using Mixed: tcp(redirect) + udp(tun)"
                        handle_mixed_mode
                        ;;
                esac
                ;;
            disable)
                handle_disable
                ;;
            *)
                show_usage
                ;;
        esac
    else
        log "ERROR" "Unknown network_mode: ${network_mode}"
        exit 1
    fi
}

# 执行主函数
main "$@"